{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","rows","onChange","event","console","log","target","backgroundColor","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.ce25d67a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  </div>\r\n  );\r\n}\r\n \r\nexport default Alert\r\n","import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) { //props is use to change string or value\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n    <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">\r\n      {props.title}\r\n    </a>\r\n    <button\r\n      className=\"navbar-toggler\"\r\n      type=\"button\"\r\n      data-bs-toggle=\"collapse\"\r\n      data-bs-target=\"#navbarSupportedContent\"\r\n      aria-controls=\"navbarSupportedContent\"\r\n      aria-expanded=\"false\"\r\n      aria-label=\"Toggle navigation\"\r\n    >\r\n      <span className=\"navbar-toggler-icon\" />\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n            Home\r\n          </a>\r\n        </li>\r\n  \r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n     </div>\r\n    </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const[text , setText]=useState(\"\");\r\n    const handleUpClick = ()=>{\r\n        let newText= text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\",\"success\")\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText= text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowerrcase!\",\"success\")\r\n\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText= '';\r\n        setText(newText)\r\n        props.showAlert(\" Text cleared!\",\"success\")\r\n\r\n    }\r\n    const handleCopy = ()=>{\r\n        // console.log(\"Copy text\")\r\n        var text =document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied to clipboard !\",\"success\")\r\n\r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n        // console.log(\"remove extra space\")\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed extra spaces!\",\"success\")\r\n\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"handle on change\") \r\n        setText(event.target.value)\r\n    }\r\n  return (\r\n  <>\r\n  <div className=\"container\"  style={{color:props.mode==='dark'?'white':'black'}}>\r\n\r\n   <h1>{props.heading}</h1>\r\n     <div className=\"mb-3\">\r\n    <textarea\r\n      className=\"form-control\"value={text}\r\n      id=\"mybox\"\r\n      rows={9}\r\n      onChange={handleOnChange}\r\n      style={{backgroundColor:props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'black'}}\r\n      ></textarea>\r\n    </div>\r\n\r\n  </div>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n  <div className=\"container my-3\"style={{color:props.mode==='dark'?'white':'black'}}>\r\n      <h1>Your text Summary</h1>\r\n      <p>{text.split(\" \").length} words and {text.length} Characters</p>\r\n      <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n  </div>\r\n  </>\r\n  )\r\n}\r\n","import './App.css';\n// import About from './Components/About';\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //wheether dark mode is enable or not\\\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message, type)=>{\n    setAlert({\n      msg:message,  \n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  const toggleMode = ()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#051e36';\n      showAlert(\"Dark mode has been enabled\",\"success\")\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\",\"success\")\n    }\n  }\n  return (\n  <>\n    <Navbar title=\"Text Utils\" mode={mode} toggleMode={toggleMode}/>\n  \n    <Alert alert={alert}/>\n\n    <div className=\"container my-3\">\n    <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n    {/* <About/> */}\n          \n    \n    </div>\n    \n  </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n \n    <App />\n  \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}